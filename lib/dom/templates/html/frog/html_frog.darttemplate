// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// DO NOT EDIT
// Auto-generated dart:html library.

#library("html");

$!GENERATED_DART_FILES

#source('../../dom/src/EventListener.dart');
#source('../../dom/src/KeyLocation.dart');
#source('../../dom/src/KeyName.dart');
#source('../../dom/src/ReadyState.dart');
#source('../../dom/src/TimeoutHandler.dart');
#source('../../dom/src/_Collections.dart');
#source('../../dom/src/_XMLHttpRequestUtils.dart');
#source('../../html/src/Measurement.dart');
#source('../../html/src/shared_FactoryProviders.dart');
#source('../../html/src/frog_FactoryProviders.dart');
#source('../../html/src/_Testing.dart');
#source('../../html/src/Device.dart');
#source('../../dom/src/_ListIterators.dart');
#source('../../dom/src/_Lists.dart');

_WindowImpl _cachedWindow;
_DocumentImpl _cachedDocument;

void _init() {
  _cachedDocument = _document;
  _cachedWindow = _window;
  // Feature detect that dart:dom and dart:html are not both loaded by
  // checking for the presence of a bug that manifests itself when both
  // libraries are loaded.
  // TODO(jacobr): remove this code once b/1911 is fixed and the frog compiler
  // is changed to generate compile time errors if two libraries that define
  // the same native types in conflicting ways are imported.
  var element = new Element.tag('body');
  element.innerHTML = 'f';
  if (element.text == '') {
    _cachedWindow.console.error(
      'Cannot import dart:html and dart:dom within the same application.');
    throw new UnsupportedOperationException(
      'Cannot import dart:html and dart:dom within the same application.');
  }
}

Window get window() {
  if (_cachedWindow == null) {
    _init();
  }
  return _cachedWindow;
}

_WindowImpl get _window() native "return window;";

Document get document() {
  if (_cachedDocument == null) {
    _init();
  }
  return _cachedDocument;
}

_DocumentImpl get _document() native "return window.document.documentElement;";

// Workaround for tags like <cite> that lack their own Element subclass --
// Dart issue 1990.
class _HTMLElementImpl extends _ElementImpl native "*HTMLElement" {
}
