// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

class $CLASSNAME extends _ElementImpl
    implements Document {
$!MEMBERS

  final dom.HTMLDocument _documentPtr;
  final _NodeImpl _wrappedDocumentPtr;
 
_DocumentImpl._wrap(ptr) :
  super._wrap(ptr),
  _documentPtr = ptr.parentNode,
  _wrappedDocumentPtr = ptr.parentNode != null ?
      new _SecretHtmlDocumentImpl._wrap(ptr.parentNode) : null;

  // For efficiency and simplicity, we always use the HtmlElement as the
  // Document but sometimes internally we need the real JS document object.
  _NodeImpl get _rawDocument() => _wrappedDocumentPtr;

  // The document doesn't have a parent element.
  _ElementImpl get parent() => null;
}

// This class should not be externally visible.  If a user ever gets access to
// a _SecretHtmlDocumentImpl object that is a bug.  This object is hidden by
// adding checks to all methods that could an HTMLDocument.  We believe that
// list is limited to Event.target, and HTMLHtmlElement.parent.
// In a wrapper based world there isn't a need for this complexity but we
// use this design for consistency with the wrapperless implementation so
// that bugs show up in both cases.
class _SecretHtmlDocumentImpl extends _NodeImpl implements Node {

  _SecretHtmlDocumentImpl._wrap(ptr) : super._wrap(ptr);

  _DocumentImpl get _documentElement() => _wrap(_ptr.documentElement);
}

EventTarget _FixHtmlDocumentReference(EventTarget eventTarget) {
  if (eventTarget is _SecretHtmlDocumentImpl) {
    _SecretHtmlDocumentImpl secretDocument = eventTarget;
    return secretDocument._documentElement;
  } else {
    return eventTarget;
  }
}
